{"version":3,"sources":["components/Footer.js","components/Note.js","components/Notification.js","services/note.js","App.js","index.js"],"names":["Footer","style","color","fontStyle","fontSize","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","noteService","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","notesToShow","filter","map","item","changedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","onChange","target","value","placeholder","required","type","ReactDOM","render","document","getElementById"],"mappings":"8MAceA,EAdD,WAMZ,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GCKSC,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAW,qBAAsB,iBACpD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,qBAAKD,UAAU,MAAf,SACE,yBAAQE,QAASL,EAAjB,cAAqCC,WCC9BK,EATM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAKA,EAEH,qBAAKJ,UAAU,QAAf,SACGI,IAHgB,M,gBCAjBC,EAAU,aAuBDC,EANK,CAClBC,OAhBa,WAEb,OADgBC,IAAMC,IAAIJ,GACXK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAezCC,OAZa,SAAAC,GAEb,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAWzCI,OARa,SAACC,EAAIH,GAElB,OADgBN,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAMH,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCkE5BO,EA3EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAUhBC,qBAJwB,WACtBvB,EAAYC,SAASG,MAAK,SAACE,GAAD,OAAUU,EAASV,QAGpB,IAE3B,IA+BMkB,EAAcL,EAASJ,EAAQA,EAAMU,QAAO,SAACnC,GAAD,OAAUA,EAAKG,aAEjE,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASuB,IACvB,8BACE,yBAAQzB,QAAS,kBAAMwB,GAAYD,IAAnC,kBACQA,EAAS,iBAAiB,WAIpC,6BAEIK,EAAYE,KAAI,SAAAC,GACd,OAAO,cAAC,EAAD,CAELrC,KAAMqC,EACNpC,iBAAkB,YAjCH,SAAAD,GACzB,IAGMsC,EAAW,2BAAOtC,GAAP,IAAaG,WAAYH,EAAKG,YAC/CO,EAAYU,OAAOpB,EAAKqB,GAAIiB,GAAaxB,MAJvB,SAACE,GACjBU,EAASD,EAAMW,KAAI,SAAAC,GAAI,OAAIA,EAAKhB,KAAOrB,EAAKqB,GAAIL,EAAKqB,SAItDE,OAAM,SAAAC,GACLR,EAAgB,YAAD,OAAahC,EAAKK,QAAlB,6BACfoC,YAAW,WACTT,EAAgB,QACf,MACHN,EAASD,EAAMU,QAAO,SAAAE,GAAI,OAAIA,EAAKhB,KAAOrB,EAAKqB,UAsBdqB,CAAmBL,KAFvCA,EAAKhB,SAQlB,uBAAMsB,SAvDM,SAAAC,GACdA,EAAEC,iBACF,IAAMC,EAAa,CACjBzC,QAASsB,EACToB,MAAM,IAAIC,MAAOC,cACjB9C,UAAW+C,KAAKC,SAAW,IAM7BzC,EAAYO,OAAO6B,GAAYhC,MAJb,SAAAE,GAChBU,EAASD,EAAM2B,OAAOpC,IACtBY,EAAW,QA8CX,UACE,uBAAOyB,SA1CY,SAAAT,GAAC,OAAIhB,EAAWgB,EAAEU,OAAOC,QA0CTC,YAAY,WAAWD,MAAO5B,EAAQ8B,UAAQ,IACjF,wBAAQC,KAAK,SAAb,0BAEF,cAAC,EAAD,Q,MCvENC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c864dfd1.chunk.js","sourcesContent":["const Footer =() => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return(\n    <div style={footerStyle}>\n      <br/>\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\nexport default Footer;","import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important? 'make not important': 'make important';\n  return(\n    <li className='note'>\n      {note.content} \n      <div className='col'>\n        <button onClick={toggleImportance}> {label}</button>\n      </div>\n    </li>\n  )\n}\n\nexport default Note;","const Notification = ({message}) => {\n  if (!message) return null\n  return(\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const promise = axios.get(baseUrl);\n  return promise.then(response => response.data);\n}\n\nconst create = newObject => {\n  const promise = axios.post(baseUrl, newObject);\n  return promise.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n  const promise = axios.put(`${baseUrl}/${id}`, newObject);\n  return promise.then(response => response.data);\n}\n\nconst noteService = {\n  getAll,\n  create,\n  update\n}\n\nexport default noteService;\n","import React, { useState, useEffect } from 'react';\nimport Footer from './components/Footer';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport noteService from './services/note';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  \n  const renderNotesHook = () => {\n    noteService.getAll().then((data) => setNotes(data))\n  };\n\n  useEffect(renderNotesHook, []);\n\n  const addNote = e => {\n    e.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n    const handleRes = data => {\n      setNotes(notes.concat(data));\n      setNewNote('');\n    }\n    noteService.create(noteObject).then(handleRes);\n  }\n  \n  const handleNoteChange = e => setNewNote(e.target.value);\n  \n  const toggleImportanceOf = note => {\n    const handleRes = (data) => {\n      setNotes(notes.map(item => item.id === note.id? data:item))\n    }\n    const changedNote = {...note, important: !note.important};\n    noteService.update(note.id, changedNote).then(handleRes)\n    .catch(err => {\n      setErrorMessage(`the note ${note.content} non exist on the server`);\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 3500)\n      setNotes(notes.filter(item => item.id !== note.id));\n    });\n  }\n\n  const notesToShow = showAll? notes : notes.filter((note) => note.important );\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          Show {showAll? 'only important':'all'}\n        </button>\n      </div>\n      \n      <ul>\n        {\n          notesToShow.map(item => {\n            return <Note\n              key={item.id}\n              note={item}\n              toggleImportance={() => {toggleImportanceOf(item)}}\n            />\n          })\n        }\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input onChange={handleNoteChange} placeholder='new note' value={newNote}required/>\n        <button type='submit'>Save Note</button>\n      </form>\n      <Footer/>\n    </div>\n  )\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}